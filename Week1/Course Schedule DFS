class Solution {
public:
    bool dfs(vector<vector<int>> &adj, vector<bool> &visit, vector<bool>&inStack, int node){
        if(inStack[node]) return true;
        if(visit[node]) return false;
        visit[node]=true;
        inStack[node]=true;
        for(auto x : adj[node]){
            if(dfs(adj,visit,inStack,x)) return true;
        }
        inStack[node]=false;
        return false;
    }
    bool canFinish(int n, vector<vector<int>>& A) {
        vector<int> in(n,0); queue<int> q;
        vector<vector<int>> adj(n); vector<bool> visit(n),inStack(n);
        for(auto x : A){
            adj[x[1]].push_back(x[0]);
            in[x[0]]++;
        } 
        for(int i=0;i<n;i++){
            if(dfs(adj,visit,inStack,i)) return false;
        }
        return true;
    }
};
