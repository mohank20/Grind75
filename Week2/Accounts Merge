class Solution {
public:
    unordered_set<string> vis;
    unordered_map<string,vector<string>> adj;
    void dfs(vector<string> &merged, string &s){
        vis.insert(s);
        merged.push_back(s);
        for(auto x : adj[s]){
            if(vis.find(x)==vis.end())
            dfs(merged,x);
        }
    }
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {     
        for(auto x : accounts){
            auto email=x[1];
            for(int i=2;i<x.size();i++){
                adj[email].push_back(x[i]);
                adj[x[i]].push_back(email);
            }
        }
        vector<vector<string>> ans; 
        for(auto x : accounts){
            if(vis.find(x[1])==vis.end()){
                vector<string> merged;
                merged.push_back(x[0]);
                dfs(merged,x[1]);
                sort(merged.begin()+1,merged.end());
                ans.push_back(merged);
            }
        }
        return ans;

    }
};
