class Solution {
public:
    void dfs(vector<vector<int>>& heights, vector<vector<int>>& vis, int a, int b){
        int m=heights.size(),n=heights[0].size(); vis[a][b]=1;
        vector<int> x = {0,1,0,-1,0};
        for(int i=0;i<4;i++){
            int ni=a+x[i],nj=b+x[i+1];
            if(ni>=0 && ni<m && nj>=0 && nj<n && heights[ni][nj]>=heights[a][b] &&!vis[ni][nj]) dfs(heights,vis,ni,nj);
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m=heights.size(),n=heights[0].size();
        vector<vector<int>> pac(m,vector<int>(n,0)),atl(m,vector<int>(n,0)),ans;
        for(int i=0;i<m;i++){
            dfs(heights,pac,i,0);
            dfs(heights,atl,i,n-1);
        }  
        for(int j=0;j<n;j++){
            dfs(heights,pac,0,j);
            dfs(heights,atl,m-1,j);
        }
        for(int i=0;i<m;i++) 
            for(int j=0;j<n;j++) 
                if(pac[i][j]&&atl[i][j]) ans.push_back({i,j}); 
         return ans;      
    }
   
};
