/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * helper(vector<int>& preorder, vector<int>& inorder, int pb, int pe, int ib, int ie ){
        if(pb<0 || pb>=preorder.size() || ib<0 || ib>=inorder.size()) return NULL;
        if (pb > pe || ib > ie) return NULL;
        auto root = new TreeNode(preorder[pb]);
        int val = find(inorder.begin()+ib,inorder.begin()+ie,preorder[pb])-inorder.begin()-ib;
        root->left=helper(preorder,inorder,pb+1,pb+val,ib,ib+val);
        root->right=helper(preorder,inorder,val+1+pb,pe,val+1+ib,ie);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return helper(preorder,inorder,0,preorder.size(),0,inorder.size());                
    }
};
