class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()>nums2.size()) return findMedianSortedArrays(nums2,nums1);
        int m=nums1.size(),n=nums2.size();
        int left=0,right=m;
        while(left<=right){ 
        //put brackets in check, and m+n+1 ensures odd even cases
            int partitionA=(left+right)/2;
            int partitionB=(m+n+1)/2-partitionA;
            int maxleftA=(partitionA==0)?INT_MIN:nums1[partitionA-1];
            int minrightA=(partitionA==m)?INT_MAX:nums1[partitionA];
            int maxleftB=(partitionB==0)?INT_MIN:nums2[partitionB-1];
            int minrightB=(partitionB==n)?INT_MAX:nums2[partitionB]; 
            if(maxleftA<=minrightB && maxleftB<=minrightA) {
                if((m+n)%2) return max(maxleftA,maxleftB);
            else return 0.5*max(maxleftA,maxleftB)+0.5*min(minrightA,minrightB);
            }
            else if(maxleftA>minrightB) right=partitionA-1;
            else left=partitionA+1;
        }
        return 0;
    }
};
