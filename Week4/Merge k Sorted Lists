/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    class Compare{
        public:
        bool operator()(pair<int,int> &a,pair<int,int> &b){
            if(a.first>b.first) return true;
            else return false;
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n=lists.size(); 
        priority_queue<pair<int,int>,vector<pair<int,int>>,Compare> pq;
        ListNode * ans = new ListNode(0), *head=ans;
        for(int i=0;i<n;i++){
           if(lists[i]) {pq.push({lists[i]->val,i}); lists[i]=lists[i]->next;}
        } 
        while(pq.size()){
            auto top=pq.top();pq.pop(); int i=top.second;
            ans->next= new ListNode(top.first); cout<<ans->val<<" "; ans=ans->next;
            if(lists[i]){pq.push({lists[i]->val,i}); lists[i]=lists[i]->next;}
        }        
        return head->next;
    }
};
