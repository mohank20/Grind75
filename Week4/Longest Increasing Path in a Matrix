class Solution {
public: int m,n; vector<int> dir = {0,1,0,-1,0};
    int dfs(vector<vector<int>>& matrix,vector<vector<int>>& cache, int i,int j){
        if(cache[i][j]) return cache[i][j];
        if(i<0 || i==m || j<0 || j>n) return 0; int maxi=1;
        for(int x=0;x<4;x++){
            int ni=i+dir[x], nj=j+dir[x+1];
            if(ni>=0 && ni<m && nj>=0 && nj<n && matrix[ni][nj]>matrix[i][j]){
                int len=max(cache[i][j],1+dfs(matrix,cache,ni,nj)); 
                //do this for no wrong computation of value dependent on cache[i][j] in recursion
                maxi=max(maxi,len);
            }
        }
        return cache[i][j]=maxi;
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size()==0) return 0;
        m=matrix.size();n=matrix[0].size(); int maxi=0;
        vector<vector<int>> cache(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int len=dfs(matrix,cache,i,j);
                maxi=max(maxi,len);
            }
        }
        return maxi;
    }
};
