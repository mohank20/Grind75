class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
            int n=profit.size();
            vector<vector<int>> jobs(n,vector<int>(3)); vector<int> dp(n+1,0);
            for(int i=0;i<n;i++){
                jobs[i][0] = startTime[i];
		        jobs[i][1] = endTime[i];
		        jobs[i][2] = profit[i];
            } 
            sort(jobs.begin(),jobs.end()); 
            for(int i=n-1;i>=0;i--){
                int next=jobfind(jobs,i,n); int include=0,exclude=0;
                include=dp[next]+jobs[i][2];
                exclude=dp[i+1];
                dp[i]=max(include,exclude);
            }
            return dp[0];
    }
    int jobfind(vector<vector<int>> &jobs, int i, int n){
        int low=i+1,high=n-1,ans=n;
        while(low<=high){
            int mid=(low+high)>>1;
            if(jobs[i][1]>jobs[mid][0]) low=mid+1;
            else {high=mid-1; ans=mid;}
        }
        return ans;
    }
};
