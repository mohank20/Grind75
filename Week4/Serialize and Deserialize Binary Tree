/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return "#";
        else return to_string(root->val) +","+serialize(root->left)+","+serialize(root->right);     
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int i=0;
        return deserialize(data,i);        
    }
     TreeNode* deserialize(string &data,int &i) {
        if(i<data.size() && data[i]=='#'){
            i+=2; return NULL;
        }   
        int delimiterPos = data.find(',', i);
        int length = delimiterPos - i;
        int value = stoi(data.substr(i, length));
        TreeNode* root=new TreeNode(value);
        i += length + 1;
        root->left=deserialize(data,i);
        root->right=deserialize(data,i);
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
